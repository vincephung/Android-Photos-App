package model;

import com.example.android50.UserAlbums;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;

/**
 * The Album class is a model for albums. An album contains photos, name, and
 * earliest/latest photo dates.
 *
 * @author Vincent Phung
 * @author William McFarland
 *
 */
public class Album implements Serializable {
    /**
     * A default id generated by eclipse to handle serialization.
     */
    private static final long serialVersionUID = 1L;
    /**
     * A list of all photos inside of the album.
     */
    private ArrayList<Photo> photos;
    /**
     * The name of the album.
     */
    private String albumName;
    /**
     * List of all albums in the application, used for serialization.
     */
    private ArrayList<Album> albums = UserAlbums.getAlbums();

    /**
     * Constructor to create a new album.
     *
     * @param albumName Name of the album.
     */
    public Album(String albumName) {
        this.albumName = albumName;
        photos = new ArrayList<Photo>();
    }

    /**
     * Constructor that creates an album containing the given arraylist of photos
     *
     * @param albumName The name of the album.
     * @param photos    A list of photos to be added.
     */
    public Album(String albumName, ArrayList<Photo> photos) {
        this.photos = photos;
        this.albumName = albumName;
    }

    /**
     * Gets the number of photos inside of the album.
     *
     * @return The number of photos inside of the album.
     */
    public int getNumPhotos() {
        return this.photos.size();
    }

    /**
     * Sets the album name to the given input
     *
     * @param newName New album name.
     */
    public void setAlbumName(String newName) {
        this.albumName = newName;
    }

    /**
     * Gets the name of the album.
     *
     * @return The name of the album.
     */
    public String getAlbumName() {
        return this.albumName;
    }

    /**
     * Gets a list of all photos inside of the album.
     *
     * @return List of all photos inside of the album.
     */
    public ArrayList<Photo> getPhotos() {
        return this.photos;
    }

    /**
     * Adds a photo to the album.
     *
     * @param photo Photo to be added.
     * @throws IOException Exception thrown if the add fails.
     */
    public void addPhoto(Photo photo) throws IOException {
        photos.add(photo);
        DataManager.save(albums);
    }

    /**
     * Removes a photo from the album.
     *
     * @param photo Photo to be removed.
     * @throws IOException Exception thrown if the remove fails.
     */
    public void removePhoto(Photo photo) throws IOException {
        photos.remove(photo);
        DataManager.save(albums);
    }

    /**
     * Checks if the picture already exists in this album.
     *
     * @param img Image file to check.
     * @return False if the picture does not already exist, true otherwise.
     */
    public boolean duplicatePicture(File img) {
        for (Photo photo : photos) {
            if (img.equals(photo.getPath())) {
                return true;
            }
        }
        return false;
    }

    /**
     * Prints out the album name.
     */
    public String toString() {
        return this.albumName;
    }

    @Override
    public boolean equals(Object o) {
        if (!(o instanceof Album)) {
            return false;
        }
        return ((Album) o).getAlbumName().equals(albumName);
    }

}
